{"version":3,"sources":["actions/Quotes.js","reducers/Quotes.js","reducers/reducers.js","components/Quotes/Quotes.js","components/App/App.js","serviceWorker.js","index.js"],"names":["QUOTES_RESQUEST_SUCCES","QUOTES_RESQUEST_FAILURE","QUOTES_RESQUEST_START_REQUEST","QUOTE_SAVING","IS_COUNTER","fetcohQuotessBegin","type","fetchQuotesSuccess","data","fetchQuotesFailure","error","initialState","savedQuotes","quote","counter","quoteError","onRequest","Quotes","state","arguments","length","undefined","action","Object","objectSpread","toConsumableArray","concat","assign","reducers","combineReducers","quotes","saveCuotes","allQuotes","map","item","i","react_default","a","createElement","className","key","index_es","icon","faBookmark","author","this","createQuotes","props","Component","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","saved","onGetQuote","bind","assertThisInitialized","avalibleQuote","onSaveQuote","getQuote","e","preventDefault","isPropagationStopped","param","quoteSaving","quoteParam","console","log","faSpinner","counterFromMap","_this2","currenQuote","currenQuoteFormat","onClick","faRedoAlt","faSave","class","components_Quotes_Quotes","connect","dispatch","fetch","then","response","json","catch","Boolean","window","location","hostname","match","root","document","getElementById","store","createStore","AppReducer","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","es","components_App_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5844695e.chunk.js","sourcesContent":["\r\n\r\nexport const QUOTES_RESQUEST_SUCCES = 'QUOTES_RESQUEST_SUCCES';\r\nexport const QUOTES_RESQUEST_FAILURE = 'QUOTES_RESQUEST_FAILURE';\r\nexport const QUOTES_RESQUEST_START_REQUEST = 'QUOTES_RESQUEST_START_REQUEST';\r\nexport const QUOTE_SAVING = \"QUOTE_SAVING\";\r\nexport const IS_COUNTER = 'IS_COUNTER';\r\n\r\nexport const isCounter = () => ({\r\n    type: IS_COUNTER\r\n})\r\nexport const fetcohQuotessBegin = () => ({\r\n    type: QUOTES_RESQUEST_START_REQUEST\r\n});\r\n\r\nexport const fetchQuotesSuccess = data => ({\r\n    type: QUOTES_RESQUEST_SUCCES,\r\n    data\r\n});\r\n\r\nexport const fetchQuotesFailure = error => ({\r\n    type: QUOTES_RESQUEST_FAILURE,\r\n    data: error\r\n});\r\n\r\nexport const quoteSaving = data => ({\r\n    type: QUOTE_SAVING,\r\n    data\r\n})\r\n\r\nexport function getQuotesRequest(dispatch) {\r\n   return (dispatch) => {\r\n    dispatch(fetcohQuotessBegin());\r\n    fetch('https://talaikis.com/api/quotes/random/').then((response) => {\r\n        return response.json()\r\n    }).then((data)=>{\r\n        dispatch(fetchQuotesSuccess(data))\r\n    }).catch((error) => {\r\n        dispatch(fetchQuotesFailure(error))\r\n    })\r\n   }\r\n}\r\n\r\n","import {\r\n    QUOTES_RESQUEST_SUCCES,\r\n    QUOTES_RESQUEST_FAILURE,\r\n    QUOTES_RESQUEST_START_REQUEST,\r\n    QUOTE_SAVING,\r\n    IS_COUNTER\r\n} from '../actions/Quotes';\r\n\r\n// import { concat,always } from 'ramda'\r\nconst initialState = {\r\n    savedQuotes: [],\r\n    quote: {},\r\n    counter: 0,\r\n    quoteError: \"\",\r\n    onRequest: false\r\n};\r\n\r\nfunction Quotes(state = initialState, action) {\r\n    switch (action.type) {\r\n        case QUOTES_RESQUEST_SUCCES:\r\n            // return Object.assign({}, state, {quote: action.data})\r\n            return {...state, quote:action.data, onRequest: false}\r\n        case QUOTE_SAVING:\r\n            // return Object.assign({}, state, {savedQuotes: [action.data]})\r\n            return {...state, savedQuotes: [...state.savedQuotes, action.data]}\r\n        case IS_COUNTER:\r\n            return Object.assign({}, state, {counter: state.counter + 1})\r\n        case QUOTES_RESQUEST_FAILURE:\r\n            return {...state, quoteError: \"At moment is not possible get info\"}\r\n        case QUOTES_RESQUEST_START_REQUEST: \r\n            return {...state, onRequest: true}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default Quotes;","import { combineReducers } from \"redux\";\r\nimport quotes from './Quotes';\r\n\r\n\r\nconst reducers = combineReducers({\r\n    quotes\r\n})\r\n\r\nexport default reducers;","import React, {Component} from 'react';\r\n\r\nimport {map} from 'ramda';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faBookmark} from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport './Quotes.css';\r\nclass saveCuotes extends Component{\r\n\r\n    createQuotes(allQuotes){\r\n        return map(function(item, i){\r\n            return(\r\n                <div className=\"card\" key={i}>\r\n                    <FontAwesomeIcon icon={faBookmark} className=\"bookmark\"></FontAwesomeIcon>\r\n                    <p>\"{item.quote}\"</p>\r\n                    <h3>{item.author}</h3>\r\n                </div>\r\n            )\r\n        }, allQuotes)\r\n    }\r\n    render(){\r\n        const quotes = this.createQuotes(this.props.allQuotes);\r\n        return(\r\n            <div className=\"cards-wrapper\">\r\n                 {quotes}\r\n            </div>\r\n           \r\n        )\r\n    }\r\n}\r\n\r\nexport default saveCuotes;","import React, { Component } from 'react';\n// import { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { getQuotesRequest, quoteSaving, isCounter } from '../../actions/Quotes';\nimport Quotes from '../Quotes/Quotes';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faRedoAlt, faSave, faSpinner} from '@fortawesome/free-solid-svg-icons'\n\nimport './App.css';\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n      this.state = {\n        saved: []\n      }\n      this.onGetQuote = this.onGetQuote.bind(this);\n      this.avalibleQuote = this.avalibleQuote.bind(this);\n      this.onSaveQuote = this.onSaveQuote.bind(this);\n      this.counter = this.counter.bind(this);\n  }\n\n  componentWillMount(){\n    this.props.getQuote();\n  }\n\n  onGetQuote(e){\n    e.preventDefault();\n    e.isPropagationStopped();\n    this.props.getQuote()\n  }\n\n  onSaveQuote(e,param){\n    e.preventDefault();\n    e.isPropagationStopped();\n    this.props.quoteSaving(param);\n  }\n\n  avalibleQuote(quoteParam, onRequest){\n    console.log(onRequest, 'onRequest', quoteParam)\n    if(onRequest){\n      return(\n        <div className=\"quote-zone\">\n          <FontAwesomeIcon icon={faSpinner}></FontAwesomeIcon>\n        </div>\n      )}else if(onRequest === false && quoteParam ){\n      return (\n        <div className=\"quote-zone\">\n        <p>{quoteParam.quote}</p>\n        <h3>{quoteParam.author}</h3>\n      </div> \n      )\n    }\n  }\n\n  counter(){\n    console.log(this.props);\n    this.props.counterFromMap()\n  }\n\n  render() { \n    const currenQuote = this.props.quotes;\n    const onRequest = this.props.onRequest;\n    const savedQuotes = this.props.savedQuotes;\n    const currenQuoteFormat = this.avalibleQuote(currenQuote, onRequest);\n\n    return (\n      <section className=\"app-wrapper\">\n        <header className=\"app-header\">\n          <label>Get Quote</label>\n          {currenQuoteFormat}\n          <div>\n            <div>\n              <button onClick={this.onGetQuote}>\n                <FontAwesomeIcon icon={faRedoAlt}></FontAwesomeIcon>\n              </button>\n              <button onClick={(e) => this.onSaveQuote(e,currenQuote)}>\n                <FontAwesomeIcon icon={faSave}></FontAwesomeIcon>\n              </button>\n            </div>\n          </div>\n        </header>\n        <div class=\"seperator-wrapper\">\n          <div class=\"seperator gradient\"></div>\n        </div>\n        <main>\n          <button onClick={this.counter}>Counter</button>\n          <Quotes allQuotes={savedQuotes}></Quotes>\n        </main>\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {  \n  return {\n    quotes: state.quotes.quote, \n    savedQuotes: state.quotes.savedQuotes,\n    onRequest: state.quotes.onRequest\n  }\n};\n\nconst mapDispatchToProps = (dispatch) => {  \n  return {\n    dispatch,\n    getQuote: () => dispatch(getQuotesRequest()),\n    quoteSaving: (param) => dispatch(quoteSaving(param)),\n    counterFromMap: () => dispatch(isCounter())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport {createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport AppReducer from './reducers/reducers'\n\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst root =  document.getElementById('root');\nconst store = createStore(AppReducer, composeWithDevTools(\n    applyMiddleware(thunk),\n));\n\nReactDOM.render( \n    <Provider store={store}>\n        <App/>\n    </Provider>, root\n  );\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}